swagger: "2.0"

#Meta info
info:
  version: "1.0"
  title: "FoxIVision"
  description: |
    FoxIVision is a solution to manage on-field verifications or service operations, effectively. Our APIs will let you build services and solutions for both "End cosumers" and "Managing background operations".
    
    Primary use case:
    
    i) Companies who are looking for doing on-field verification of their customers or resources, can use FoxIVision to manage it seamlessly. Customers can upload their list of customers or resource profiles which need to be verified, from a self service portal. FoxIVision's CAT team will look into these cases and later assign Field Executives to perform the on-field verification task. The Field Executives will visit the customer's premise to get all required details with photos/videos if reuqired. Then, FoxIVision's RMT team will prepare a report based on data collected from field. Then the report goes to QC Team who verifies and forward it to CAT. Finally CAT sends the report to the client for final approval. On approval, the accounts department gets notified for the same for billing purposes.
      That complete flow, from managing customer's cases, to auto-job dispatching, to tracking field executives, to final report generation, can be easily managed using this all-in-one FoxIVision platform.
      
# host: "138.201.134.48:3020"
host: "foxivision.com"
basePath: "/api"
schemes:
  - "http"
  - "https"
security:
  - ApiKeyAuth: []
consumes:
  - "application/json"
produces:
  - "application/json"  
tags:
  - name: "Users"
    description:  |
      In FoxIVision, users can be CAT team members, Calling team members, Field Managers, Field co-ordinators, Field Executives, Accounts team members, RMT or QC team members. The users endpoints can be used to login to the system, to check status of assigned Cases and to update details on work performed at customer's location etc.
  - name: "Cases"
    description: |
      Cases are nothing but tasks which the CAT team collected from Clients and uploaded in system, which requires on-field verification service.
      Cases endpoints can be used to raise create a new case, get list of open Cases for an user and to update a case details.
  - name: "Locations"
    description:  "Locations are actual cities, districts where field executives are providing serivces."
  - name: "Statistics"
    description:  "Use these endpoints to get useful statistics based on location, client, user etc."

# Paths
paths:
  /users/sign_in:
    post:
      summary:  "User signin"
      security: []   # No security
      description:  |
        The Signin endpoint allows you to authorize your application and get an access_token using the email and password.
      tags:
        - "Users"
      parameters:      
        - in: "body"
          name: "user"
          description:  "Sample payload for user signin"
          required: true
          schema:
            $ref: "#/definitions/SigninRequestBody"
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            $ref: "#/definitions/UserDetailsResponse"
        "401":
          description:  "Status-Code: 401 unauthorized"
          schema:
            type: string
            example: "Invalid email or password"         
  /users/{id}:
    get:
      summary:  "Get user details"
      description:  |
        This endpoint returns the details of an authenticated user. Response includes information such as name, email and account status.
      tags:
        - "Users"
      parameters:
        - name: "id"
          in: "path"
          type: "string"
          required: true   
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            $ref: "#/definitions/UserDetailsResponse"
  /cases:
    get:
      summary: "Get cases"
      description:  |
        This endpoint returns the list of all cases. The response can be filtered by: state (open, allocated, in_progress, data_submitted, report_generated, report_approved, report_rejected, closed), address, location, appointment_date, assignee, date (using from_date), date range (using from_date and to_date) etc.
      tags:
        - "Cases"
      parameters:
        - name: state
          in: query
          type: string
          description: |
            Use this parameter to filter cases by state. Sample values: open, allocated, in_progress, data_submitted, report_generated, report_approved, report_rejected, closed
        - name: client_id
          in: query
          type: string
          description: Filter cases by client ID.
        - name: location_id
          in: query
          type: string
          description: Filter cases by location ID.
        - name: appointment_date    
          in: query
          type: string      
          description: Filter cases by case date.
        - name: field_executive_id
          in: query
          type: string    
          description: Filter cases by field executive ID.
        - name: from_date    
          in: query
          type: string      
          description: To filter results by a date, use this parameter.
        - name: to_date    
          in: query
          type: string      
          description: To filter results by a date range, use to_date parameter along with from_date parameter.                    
        - name: page
          in: query
          type: string
          description: Response of the cases endpoint is paginated by default. Use this parameter to get cases with different page numbers.
        - name: per
          in: query
          type: string    
          description: By default, the cases endpoint returns 20 results per page. If you need more or less data, tweak this parameter value accordingly.
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "20 results found"
              meta:
                type: object
                properties:
                  total_result_count:
                    type: integer
                    example: 56
                  page:
                    type: integer
                    example: 1
                  per:
                    type: integer
                    example: 20
              payload:
                type: array
                items:
                  $ref: "#/definitions/Case"
                example:
                  - id: 38
                    case_number: CS129
                    client_id: 345
                    client_name: Apollo Hospital
                    location_id:  4
                    location_name:  Kolkata
                    appointment_datetime: 04-06-2022 10AM
                    state: open
                    field_executive_id: 123
                    started_at: 04-06-2022 10AM
                    closed_at: 04-06-2022 11AM    
                    actual_time: 60
                    rating: 9                
                  - id: 114
                    case_number: CS130
                    client_id: 2121
                    client_name: Fortis Hospital
                    location_id:  5
                    location_name:  Delhi
                    appointment_datetime: 04-06-2022 10AM
                    state: allocated
                    field_executive_id: 45
                    started_at: 04-06-2022 10AM
                    closed_at: 04-06-2022 12AM    
                    actual_time: 120
                    rating: 8
    post:
      summary:  "Create new case"
      description:  |
        This endpoint allows us to register a new case.
      tags:
        - "Cases"
      parameters:
        - in: "body"
          name: "case"
          description:  "Sample payload for creating a case"
          required: true
          schema:
            $ref: "#/definitions/CreateAppointmentRequestBody"
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "Case created successfully"
              meta:
                type: object
              payload:          
                $ref: "#/definitions/Case"
        "422":
          description:  "Status-Code: 422 Unprocessable Entity"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Unable to create this case"
              meta:
                type: object 
              payload:
                type: object
                example:
                  {
                    case_number: ["Can't be blank", "Should not contain space"]
                  } 
  /cases/{appointment_id}:
    get:
      summary:  "Get a case details"
      description:  "This endpoint returns case details by case number. The response includes important details like: case datetime, current state, due date, assignee details etc."
      tags:
        - "Cases" 
      parameters:
        - name: "appointment_id"
          in: "path"
          type: "string"
          required: true
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "A case found with number: CS212"
              meta:
                type: object
              payload:            
                $ref: "#/definitions/Case"    
        "404":
          description:  "No case found"  
    put:
      summary:  "Update a case"
      description:  |
        This endpoint allows updating the case details, like: changing state, adding comments with images etc. 
      tags:
        - "Cases" 
      parameters:
        - name: "appointment_id"
          in: "path"
          type: "string"
          required: true
        - name: "case"
          in: "body"
          description:  "Sample payload for updating a case"
          required: true
          schema:
            $ref: "#/definitions/UpdateAppointmentRequestBody"
      responses:
        "200":
          description: "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "Case updated successfully"
              meta:
                type: object
              payload:          
                $ref: "#/definitions/Case"
        "422":
          description:  "Status-Code: 422 Unprocessable Entity"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Unable to update this case"
              meta:
                type: object 
              payload:
                type: object
                example:
                  {
                    field_executive_id: ["Assignee not available on provided datetime"],
                    appointment_datetime: ["Schedule case before due date"]
                  } 
  /cases/{appointment_id}/add_comment:
    post:
      summary:  "Add comment on a case"
      description:  |
        This endpoint allows user to add comments against a case number. A comment can contain text or image or both.
      tags:
        - "Cases" 
      parameters:
        - name: "appointment_id"
          in: "path"
          type: "string"
          required: true
        - name: "case_comment"
          in: "body"
          description:  "Sample payload for adding a comment against a case"
          required: true
          schema:
            $ref: "#/definitions/AddAppointmentCommentRequestBody"
      responses:
        "200":
          description: "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "Commented successfully"
              meta:
                type: object
              payload:          
                $ref: "#/definitions/AppointmentComment"
        "422":
          description:  "Status-Code: 422 Unprocessable Entity"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Unable to add comment"
              meta:
                type: object 
              payload:
                type: object
                example:
                  {
                    attachment: ["File too large, should be less than 10MB."]
                  }  
  /statistics/user_dashboard:
    get:
      summary: Get stats required for user dashboard
      description: |
        This endpoint returns few key stats for user, like: number of total cases, completed cases, open cases, overdue cases etc. The response can be filtered by: date range using the from_date and to_date parameter.
      tags:
        - "Statistics"
      parameters:
        - name: from_date    
          in: query
          type: string      
          description: To filter results by a date, use this parameter.
        - name: to_date    
          in: query
          type: string      
          description: To filter results by a date range, use to_date parameter along with from_date parameter.    
      responses:
        "200":
          description:  "Status-Code: 200 OK"
          schema:
            type: object
            properties: 
              status:
                type: string
                example: "ok"
              message:
                type: string
                example: "Stats found"
              meta:
                type: object
              payload:
                type: object
                example:
                  {
                    total_cases: 20,
                    completed_cases: 12,
                    open_cases: 5,
                    overdue_cases: 3
                  }            

# Definitions
definitions:
  Case:
    type: "object"
    required:
      - "id"
      - "case_number"
      - "client_id"
      - "location_id"
      - "appointment_datetime"
    properties:
      id:
        type: "integer"
        example: 12
      case_number:
        type: "string"
        example: "CS2125"
      client_id:
        type: "integer"        
        example: 345
      location_id:
        type: "integer"
        example: 4
      appointment_datetime:
        type: "string"
        example: "2022-06-10T10:30:00.000Z"
      state:
        type: "string"
        enum:
          - "open"
          - "allocated"        
          - "in_progress"
          - "on_hold"
          - "data_submitted"
          - "report_generated"
          - "report_verified"
          - "report_approved"
          - "report_rejected"
          - "cancelled"
          - "closed"
        example: allocated
      field_executive_id:
        type: "integer"
        example: 123
      started_at:
        type: "string"
        example: 04-06-2022 10AM
      closed_at:
        type: "string" 
        example: 04-06-2022 11AM    
      actual_time:
        type: "integer"         
        example: 60
      rating:
        type: "integer"   
        example: 9
  AppointmentComment:
    type: object
    required:
      - "appointment_id"
      - "user_id"
    properties:
      id:
        type: integer
        example: 12
      appointment_id:
        type: integer
        example: 321
      comment:
        type: string
        example: Reached at location
      user_id:
        type: integer
        example: 32
  User:
    type: "object"
    required:
      - "id"
      - "name"
      - "email"
      - "password"
      - "phone_number"
      - "location_id"
    properties:
      id:
        type: "integer"
      name:
        type: "string" 
      user_type:
        type: "integer" 
      email:
        type: "string" 
      password:
        type: "string" 
      phone_number:
        type: "string" 
      location_id:
        type: "integer" 
      is_available:
        type: "boolean" 
      work_days:
        type: "string" 
      working_hours:
        type: "string"       
      fcm_id:
        type: "string"               
  Location:
    type: "object"
    required:
      - "id"
      - "name"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      plus_code:
        type: string
  # User payload samples
  SigninRequestBody:
    type: "object"
    properties:
      user:
        type: object
        properties: 
          email:
            type: "string"
            example: "test@geogo.in"    
          password:
            type: "string"
            example: "12345678"   
  SigninResponse:
    type: "object"
    properties:
      id:
        type: integer
        example: 123
      name:
        type: string
        example: Avishek Jana
      email:
        type: string
        example: avishek@geogo.in
      phone_number:
        type: string
        example: 8899199929
      location_id:
        type: integer
        example: 4
      is_available:
        type: boolean
        example: true
      avg_rating: 
        type: integer
        example: 8
      fcm_id:
        type: string
        example: b1c2b1b21b2b1vb2vb1vb2v1n21212
      access_token:
        type: string
        example: sqw1281w1njhj1.b1c2b1b21vb2v1n21212.12iwiqwiuqw8q8  
  UserDetailsResponse:
    type: "object"
    properties:
      id:
        type: integer
        example: 123
      name:
        type: string
        example: Avishek Jana
      email:
        type: string
        example: avishek@geogo.in
      phone_number:
        type: string
        example: 8899199929
      is_available:
        type: boolean
        example: true
      avg_rating: 
        type: integer
        example: 8
      working_days:
        type: string
        example: "[\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]"
      address:
        type: string
        example: "Kolkata"
      latitude:
        type: string
        example: 22.123121      
      longitude:
        type: string
        example: 77.223123
      working_hour_start_at:
        type: string
        example: "2022-06-21T09:24:00.000Z"
      working_hour_end_at:
        type: string        
        example: "2022-06-21T20:24:00.000Z"
      user_type:
        type: string
        example: "Agent"
      location:
        type: object
        properties:
          id:
            type: integer
            example: 1
          name:
            type: string
            example: "FE-488, Saltlake, Sector-3, Kolkata"
          latitude:
            type: string
            example: "22.525570"
          longitude:
            type: string
            example: "88.399990"
  # Case payload samples
  CreateAppointmentRequestBody:
    type: object   
    properties:
      case:
        type: object
        properties: 
          case_number:
            type: "string"
            example: Cx100929  
          client_id:
            type: "string"
            example: 32     
          appointment_datetime:
            type: "string"
            example: 04-06-2022 10AM      
          location_id:
            type: "string"
            example: 4
  UpdateAppointmentRequestBody:   
    type: object   
    properties:
      case:
        type: object
        properties: 
          aasm_state:
            type: "string"
            example: in_progress       
          field_executive_id:
            type: number
            example: 4                                            
          appointment_datetime:
            type: "string"
            example: "2022-06-10T10:30:00.000Z"
          comments_attributes:
            type: array
            items:
              example:
                {
                  "user_id": 1,
                  "comment": "Reached at location",
                  "photos": <file>
                }
          time_logs_attributes:
            type: array
            items:
              example:
                {
                  "user_id": 1,
                  "logged_time_in_min": 120,
                  "remarks": "Task Completed"
                }                
                
              # $ref: "#/definitions/AppointmentComment"
  AddAppointmentCommentRequestBody:
    type: object   
    properties:
      appointment_comment:
        type: object
        properties: 
          comment:
            type: "string"
            example: Reached at client location  
          attachment:
            type: "string"
            example: '<file>'            
securityDefinitions:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: Authorization